{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":73291,"databundleVersionId":8930475,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/marydata/xbg-classifier-tuning?scriptVersionId=188841894\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-18T15:16:49.532598Z","iopub.execute_input":"2024-07-18T15:16:49.533056Z","iopub.status.idle":"2024-07-18T15:16:50.822716Z","shell.execute_reply.started":"2024-07-18T15:16:49.533016Z","shell.execute_reply":"2024-07-18T15:16:50.821617Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.metrics import roc_auc_score, roc_curve, auc\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np","metadata":{"execution":{"iopub.status.busy":"2024-07-18T15:17:24.301305Z","iopub.execute_input":"2024-07-18T15:17:24.301828Z","iopub.status.idle":"2024-07-18T15:17:25.200081Z","shell.execute_reply.started":"2024-07-18T15:17:24.301797Z","shell.execute_reply":"2024-07-18T15:17:25.198504Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#load train, test dataset and save columns in the list\ntrain = pd.read_csv('/kaggle/input/playground-series-s4e7/train.csv', sep=','); columns = train.columns.tolist(); test =pd.read_csv('/kaggle/input/playground-series-s4e7/test.csv', sep=',')","metadata":{"execution":{"iopub.status.busy":"2024-07-18T15:17:27.024118Z","iopub.execute_input":"2024-07-18T15:17:27.024555Z","iopub.status.idle":"2024-07-18T15:18:06.884288Z","shell.execute_reply.started":"2024-07-18T15:17:27.024522Z","shell.execute_reply":"2024-07-18T15:18:06.882874Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#save features with categorial type \nobject_columns = train.select_dtypes(include=['object']).columns.tolist()","metadata":{"execution":{"iopub.status.busy":"2024-07-18T15:18:20.148541Z","iopub.execute_input":"2024-07-18T15:18:20.149004Z","iopub.status.idle":"2024-07-18T15:18:20.590274Z","shell.execute_reply.started":"2024-07-18T15:18:20.14896Z","shell.execute_reply":"2024-07-18T15:18:20.588792Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train['Vehicle_Age'].replace({'< 1 Year':0, '1-2 Year':1, '> 2 Years':2}, inplace=True )\ntrain['Vehicle_Damage'].replace({'No':0, 'Yes':1}, inplace=True )\ntrain['Gender'].replace({'Male':0, 'Female':1}, inplace=True )\n\ntest['Vehicle_Age'].replace({'< 1 Year':0, '1-2 Year':1, '> 2 Years':2}, inplace=True )\ntest['Vehicle_Damage'].replace({'No':0, 'Yes':1}, inplace=True )\ntest['Gender'].replace({'Male':0, 'Female':1}, inplace=True )\ntest_ = test.drop('id', axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-07-18T15:18:21.451814Z","iopub.execute_input":"2024-07-18T15:18:21.452831Z","iopub.status.idle":"2024-07-18T15:19:05.452702Z","shell.execute_reply.started":"2024-07-18T15:18:21.452792Z","shell.execute_reply":"2024-07-18T15:19:05.451389Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X = train.drop(['id', 'Response'], axis=1)\ny = train['Response']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=True, stratify=y, random_state=123)","metadata":{"execution":{"iopub.status.busy":"2024-07-18T15:20:28.541647Z","iopub.execute_input":"2024-07-18T15:20:28.542104Z","iopub.status.idle":"2024-07-18T15:20:37.011495Z","shell.execute_reply.started":"2024-07-18T15:20:28.542067Z","shell.execute_reply":"2024-07-18T15:20:37.010301Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"param_grid = {\n    'eta': [0.01, 0.03, 0.05],\n    'max_depth': [10, 12, 14],\n    'subsample': [0.8, 0.85, 0.9],\n    'colsample_bytree': [0.4, 0.45, 0.5],\n    'min_child_weight': [8, 10, 12],\n    'gamma': [0, 1e-6, 1e-5],\n    'max_bin': [30000, 35000, 40000],\n    'n_estimators': [1000, 5000, 10000],\n    'tree_method': ['hist'],\n    'eval_metric': ['auc'],\n    'objective': ['binary:logistic'],\n    'random_state': [42]\n}","metadata":{"execution":{"iopub.status.busy":"2024-07-18T15:20:45.410416Z","iopub.execute_input":"2024-07-18T15:20:45.410845Z","iopub.status.idle":"2024-07-18T15:20:45.419153Z","shell.execute_reply.started":"2024-07-18T15:20:45.41081Z","shell.execute_reply":"2024-07-18T15:20:45.417875Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"xgb_cl = XGBClassifier(use_label_encoder=False)\n\n# Use RandomizedSearchCV to find the best parameters\nrandom_search = RandomizedSearchCV(estimator=xgb_cl, param_distributions=param_grid, scoring='roc_auc', cv=3, n_jobs=-1, n_iter=50, verbose=1, random_state=42)\nrandom_search.fit(X_train, y_train)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Print the best parameters and best score\nprint(\"Best Parameters:\", random_search.best_params_)\nprint(\"Best ROC AUC Score:\", random_search.best_score_)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Train the model with the best parameters\nbest_params = random_search.best_params_\nbest_xgb_model = XGBClassifier(**best_params, use_label_encoder=False)\nbest_xgb_model.fit(X_train, y_train, eval_set=[(X_test, y_test)], early_stopping_rounds=50, verbose=50)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_pred_xgb = best_xgb_model.predict_proba(X_test)[:, 1]\n\n# Compute the ROC curve and AUC\nfpr, tpr, _ = roc_curve(y_test, y_pred_xgb)\nprint(f'ROC AUC Score: {roc_auc:.4f}')","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"roc_auc = auc(fpr, tpr)\n# Plot the ROC curve\nplt.figure(figsize=(10, 8))\nplt.plot(fpr, tpr, color='blue', lw=2, label=f'XGBoost (AUC = {roc_auc:.2f})')\nplt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic (ROC) Curve')\nplt.legend(loc='lower right')\nplt.grid(True)\nplt.show()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_preds_xgb_tuning = xgb_cl.predict_proba(test_)[:, 1]\n\nplayground_july = pd.DataFrame({\"id\":test.id, \"Response\": y_preds_xgb_tuning})\nplayground_july.to_csv(\"playground_july2_3.csv\", index=False)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}